// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/volatrade/tickers/internal/connections (interfaces: Connections)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/volatrade/tickers/internal/models"
	reflect "reflect"
)

// MockConnections is a mock of Connections interface
type MockConnections struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionsMockRecorder
}

// MockConnectionsMockRecorder is the mock recorder for MockConnections
type MockConnectionsMockRecorder struct {
	mock *MockConnections
}

// NewMockConnections creates a new mock instance
func NewMockConnections(ctrl *gomock.Controller) *MockConnections {
	mock := &MockConnections{ctrl: ctrl}
	mock.recorder = &MockConnectionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnections) EXPECT() *MockConnectionsMockRecorder {
	return m.recorder
}

// InsertOrderBookRowToDataBase mocks base method
func (m *MockConnections) InsertOrderBookRowToDataBase(arg0 *models.OrderBookRow, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrderBookRowToDataBase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrderBookRowToDataBase indicates an expected call of InsertOrderBookRowToDataBase
func (mr *MockConnectionsMockRecorder) InsertOrderBookRowToDataBase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrderBookRowToDataBase", reflect.TypeOf((*MockConnections)(nil).InsertOrderBookRowToDataBase), arg0, arg1)
}

// InsertTransactionToDataBase mocks base method
func (m *MockConnections) InsertTransactionToDataBase(arg0 *models.Transaction, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactionToDataBase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransactionToDataBase indicates an expected call of InsertTransactionToDataBase
func (mr *MockConnectionsMockRecorder) InsertTransactionToDataBase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionToDataBase", reflect.TypeOf((*MockConnections)(nil).InsertTransactionToDataBase), arg0, arg1)
}

// MakeConnections mocks base method
func (m *MockConnections) MakeConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MakeConnections")
}

// MakeConnections indicates an expected call of MakeConnections
func (mr *MockConnectionsMockRecorder) MakeConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeConnections", reflect.TypeOf((*MockConnections)(nil).MakeConnections))
}

// TransferOrderBookCache mocks base method
func (m *MockConnections) TransferOrderBookCache(arg0 []*models.OrderBookRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferOrderBookCache", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferOrderBookCache indicates an expected call of TransferOrderBookCache
func (mr *MockConnectionsMockRecorder) TransferOrderBookCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferOrderBookCache", reflect.TypeOf((*MockConnections)(nil).TransferOrderBookCache), arg0)
}

// TransferTransactionCache mocks base method
func (m *MockConnections) TransferTransactionCache(arg0 []*models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTransactionCache", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferTransactionCache indicates an expected call of TransferTransactionCache
func (mr *MockConnectionsMockRecorder) TransferTransactionCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTransactionCache", reflect.TypeOf((*MockConnections)(nil).TransferTransactionCache), arg0)
}
