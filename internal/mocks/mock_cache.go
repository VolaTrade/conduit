// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/volatrade/tickers/internal/cache (interfaces: Cache)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/volatrade/tickers/internal/models"
	reflect "reflect"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetAllOrderBookRows mocks base method
func (m *MockCache) GetAllOrderBookRows() []*models.OrderBookRow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderBookRows")
	ret0, _ := ret[0].([]*models.OrderBookRow)
	return ret0
}

// GetAllOrderBookRows indicates an expected call of GetAllOrderBookRows
func (mr *MockCacheMockRecorder) GetAllOrderBookRows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderBookRows", reflect.TypeOf((*MockCache)(nil).GetAllOrderBookRows))
}

// GetAllTransactions mocks base method
func (m *MockCache) GetAllTransactions() []*models.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions")
	ret0, _ := ret[0].([]*models.Transaction)
	return ret0
}

// GetAllTransactions indicates an expected call of GetAllTransactions
func (mr *MockCacheMockRecorder) GetAllTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockCache)(nil).GetAllTransactions))
}

// GetOrderBookUrl mocks base method
func (m *MockCache) GetOrderBookUrl(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderBookUrl", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOrderBookUrl indicates an expected call of GetOrderBookUrl
func (mr *MockCacheMockRecorder) GetOrderBookUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderBookUrl", reflect.TypeOf((*MockCache)(nil).GetOrderBookUrl), arg0)
}

// GetTransactionUrl mocks base method
func (m *MockCache) GetTransactionUrl(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionUrl", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTransactionUrl indicates an expected call of GetTransactionUrl
func (mr *MockCacheMockRecorder) GetTransactionUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionUrl", reflect.TypeOf((*MockCache)(nil).GetTransactionUrl), arg0)
}

// InsertOrderBookRow mocks base method
func (m *MockCache) InsertOrderBookRow(arg0 *models.OrderBookRow) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertOrderBookRow", arg0)
}

// InsertOrderBookRow indicates an expected call of InsertOrderBookRow
func (mr *MockCacheMockRecorder) InsertOrderBookRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrderBookRow", reflect.TypeOf((*MockCache)(nil).InsertOrderBookRow), arg0)
}

// InsertOrderBookUrl mocks base method
func (m *MockCache) InsertOrderBookUrl(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertOrderBookUrl", arg0)
}

// InsertOrderBookUrl indicates an expected call of InsertOrderBookUrl
func (mr *MockCacheMockRecorder) InsertOrderBookUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrderBookUrl", reflect.TypeOf((*MockCache)(nil).InsertOrderBookUrl), arg0)
}

// InsertTransaction mocks base method
func (m *MockCache) InsertTransaction(arg0 *models.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTransaction", arg0)
}

// InsertTransaction indicates an expected call of InsertTransaction
func (mr *MockCacheMockRecorder) InsertTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockCache)(nil).InsertTransaction), arg0)
}

// InsertTransactionUrl mocks base method
func (m *MockCache) InsertTransactionUrl(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTransactionUrl", arg0)
}

// InsertTransactionUrl indicates an expected call of InsertTransactionUrl
func (mr *MockCacheMockRecorder) InsertTransactionUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionUrl", reflect.TypeOf((*MockCache)(nil).InsertTransactionUrl), arg0)
}

// Purge mocks base method
func (m *MockCache) Purge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Purge")
}

// Purge indicates an expected call of Purge
func (mr *MockCacheMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockCache)(nil).Purge))
}

// TransactionsLength mocks base method
func (m *MockCache) TransactionsLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionsLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// TransactionsLength indicates an expected call of TransactionsLength
func (mr *MockCacheMockRecorder) TransactionsLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionsLength", reflect.TypeOf((*MockCache)(nil).TransactionsLength))
}

// UrlsLength mocks base method
func (m *MockCache) UrlsLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UrlsLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// UrlsLength indicates an expected call of UrlsLength
func (mr *MockCacheMockRecorder) UrlsLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrlsLength", reflect.TypeOf((*MockCache)(nil).UrlsLength))
}
