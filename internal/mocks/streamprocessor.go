// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/volatrade/conduit/internal/streamprocessor (interfaces: StreamProcessor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	socket "github.com/volatrade/conduit/internal/socket"
	reflect "reflect"
	sync "sync"
)

// MockStreamProcessor is a mock of StreamProcessor interface
type MockStreamProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockStreamProcessorMockRecorder
}

// MockStreamProcessorMockRecorder is the mock recorder for MockStreamProcessor
type MockStreamProcessorMockRecorder struct {
	mock *MockStreamProcessor
}

// NewMockStreamProcessor creates a new mock instance
func NewMockStreamProcessor(ctrl *gomock.Controller) *MockStreamProcessor {
	mock := &MockStreamProcessor{ctrl: ctrl}
	mock.recorder = &MockStreamProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamProcessor) EXPECT() *MockStreamProcessorMockRecorder {
	return m.recorder
}

// BuildOrderBookChannels mocks base method
func (m *MockStreamProcessor) BuildOrderBookChannels(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildOrderBookChannels", arg0)
}

// BuildOrderBookChannels indicates an expected call of BuildOrderBookChannels
func (mr *MockStreamProcessorMockRecorder) BuildOrderBookChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildOrderBookChannels", reflect.TypeOf((*MockStreamProcessor)(nil).BuildOrderBookChannels), arg0)
}

// BuildTransactionChannels mocks base method
func (m *MockStreamProcessor) BuildTransactionChannels(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildTransactionChannels", arg0)
}

// BuildTransactionChannels indicates an expected call of BuildTransactionChannels
func (mr *MockStreamProcessorMockRecorder) BuildTransactionChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildTransactionChannels", reflect.TypeOf((*MockStreamProcessor)(nil).BuildTransactionChannels), arg0)
}

// InsertPairsFromBinanceToCache mocks base method
func (m *MockStreamProcessor) InsertPairsFromBinanceToCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPairsFromBinanceToCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPairsFromBinanceToCache indicates an expected call of InsertPairsFromBinanceToCache
func (mr *MockStreamProcessorMockRecorder) InsertPairsFromBinanceToCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPairsFromBinanceToCache", reflect.TypeOf((*MockStreamProcessor)(nil).InsertPairsFromBinanceToCache))
}

// ListenAndHandleDataChannels mocks base method
func (m *MockStreamProcessor) ListenAndHandleDataChannels(arg0 context.Context, arg1 int, arg2 *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenAndHandleDataChannels", arg0, arg1, arg2)
}

// ListenAndHandleDataChannels indicates an expected call of ListenAndHandleDataChannels
func (mr *MockStreamProcessorMockRecorder) ListenAndHandleDataChannels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndHandleDataChannels", reflect.TypeOf((*MockStreamProcessor)(nil).ListenAndHandleDataChannels), arg0, arg1, arg2)
}

// ListenForDatabasePriveleges mocks base method
func (m *MockStreamProcessor) ListenForDatabasePriveleges(arg0 context.Context, arg1 *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenForDatabasePriveleges", arg0, arg1)
}

// ListenForDatabasePriveleges indicates an expected call of ListenForDatabasePriveleges
func (mr *MockStreamProcessorMockRecorder) ListenForDatabasePriveleges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForDatabasePriveleges", reflect.TypeOf((*MockStreamProcessor)(nil).ListenForDatabasePriveleges), arg0, arg1)
}

// ListenForExit mocks base method
func (m *MockStreamProcessor) ListenForExit(arg0 context.Context, arg1 *sync.WaitGroup, arg2 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenForExit", arg0, arg1, arg2)
}

// ListenForExit indicates an expected call of ListenForExit
func (mr *MockStreamProcessorMockRecorder) ListenForExit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForExit", reflect.TypeOf((*MockStreamProcessor)(nil).ListenForExit), arg0, arg1, arg2)
}

// RunSocketRoutines mocks base method
func (m *MockStreamProcessor) RunSocketRoutines(arg0 int) []*socket.ConduitSocketManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSocketRoutines", arg0)
	ret0, _ := ret[0].([]*socket.ConduitSocketManager)
	return ret0
}

// RunSocketRoutines indicates an expected call of RunSocketRoutines
func (mr *MockStreamProcessorMockRecorder) RunSocketRoutines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSocketRoutines", reflect.TypeOf((*MockStreamProcessor)(nil).RunSocketRoutines), arg0)
}
