// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/volatrade/candles/internal/client (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
	sync "sync"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ConnectSocketAndReadTickData mocks base method
func (m *MockClient) ConnectSocketAndReadTickData(arg0 string, arg1 chan os.Signal, arg2 chan map[string]interface{}, arg3 *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConnectSocketAndReadTickData", arg0, arg1, arg2, arg3)
}

// ConnectSocketAndReadTickData indicates an expected call of ConnectSocketAndReadTickData
func (mr *MockClientMockRecorder) ConnectSocketAndReadTickData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectSocketAndReadTickData", reflect.TypeOf((*MockClient)(nil).ConnectSocketAndReadTickData), arg0, arg1, arg2, arg3)
}

// FetchFiveMinuteCandle mocks base method
func (m *MockClient) FetchFiveMinuteCandle(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFiveMinuteCandle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchFiveMinuteCandle indicates an expected call of FetchFiveMinuteCandle
func (mr *MockClientMockRecorder) FetchFiveMinuteCandle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFiveMinuteCandle", reflect.TypeOf((*MockClient)(nil).FetchFiveMinuteCandle), arg0)
}

// GetActiveBinanceExchangePairs mocks base method
func (m *MockClient) GetActiveBinanceExchangePairs() ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveBinanceExchangePairs")
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveBinanceExchangePairs indicates an expected call of GetActiveBinanceExchangePairs
func (mr *MockClientMockRecorder) GetActiveBinanceExchangePairs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveBinanceExchangePairs", reflect.TypeOf((*MockClient)(nil).GetActiveBinanceExchangePairs))
}
