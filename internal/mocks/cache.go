// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/volatrade/conduit/internal/cache (interfaces: Cache)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/volatrade/conduit/internal/models"
	reflect "reflect"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetAllOrderBookRows mocks base method
func (m *MockCache) GetAllOrderBookRows() []*models.OrderBookRow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderBookRows")
	ret0, _ := ret[0].([]*models.OrderBookRow)
	return ret0
}

// GetAllOrderBookRows indicates an expected call of GetAllOrderBookRows
func (mr *MockCacheMockRecorder) GetAllOrderBookRows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderBookRows", reflect.TypeOf((*MockCache)(nil).GetAllOrderBookRows))
}

// GetAllTransactions mocks base method
func (m *MockCache) GetAllTransactions() []*models.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions")
	ret0, _ := ret[0].([]*models.Transaction)
	return ret0
}

// GetAllTransactions indicates an expected call of GetAllTransactions
func (mr *MockCacheMockRecorder) GetAllTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockCache)(nil).GetAllTransactions))
}

// GetPair mocks base method
func (m *MockCache) GetPair(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPair", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPair indicates an expected call of GetPair
func (mr *MockCacheMockRecorder) GetPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPair", reflect.TypeOf((*MockCache)(nil).GetPair), arg0)
}

// GetTransactionOrderBookUrls mocks base method
func (m *MockCache) GetTransactionOrderBookUrls(arg0 int) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionOrderBookUrls", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactionOrderBookUrls indicates an expected call of GetTransactionOrderBookUrls
func (mr *MockCacheMockRecorder) GetTransactionOrderBookUrls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionOrderBookUrls", reflect.TypeOf((*MockCache)(nil).GetTransactionOrderBookUrls), arg0)
}

// InsertOrderBookRow mocks base method
func (m *MockCache) InsertOrderBookRow(arg0 *models.OrderBookRow) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertOrderBookRow", arg0)
}

// InsertOrderBookRow indicates an expected call of InsertOrderBookRow
func (mr *MockCacheMockRecorder) InsertOrderBookRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrderBookRow", reflect.TypeOf((*MockCache)(nil).InsertOrderBookRow), arg0)
}

// InsertPair mocks base method
func (m *MockCache) InsertPair(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertPair", arg0)
}

// InsertPair indicates an expected call of InsertPair
func (mr *MockCacheMockRecorder) InsertPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPair", reflect.TypeOf((*MockCache)(nil).InsertPair), arg0)
}

// InsertTransaction mocks base method
func (m *MockCache) InsertTransaction(arg0 *models.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTransaction", arg0)
}

// InsertTransaction indicates an expected call of InsertTransaction
func (mr *MockCacheMockRecorder) InsertTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockCache)(nil).InsertTransaction), arg0)
}

// OrderBookRowsLength mocks base method
func (m *MockCache) OrderBookRowsLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderBookRowsLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// OrderBookRowsLength indicates an expected call of OrderBookRowsLength
func (mr *MockCacheMockRecorder) OrderBookRowsLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBookRowsLength", reflect.TypeOf((*MockCache)(nil).OrderBookRowsLength))
}

// PairsLength mocks base method
func (m *MockCache) PairsLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PairsLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// PairsLength indicates an expected call of PairsLength
func (mr *MockCacheMockRecorder) PairsLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PairsLength", reflect.TypeOf((*MockCache)(nil).PairsLength))
}

// Purge mocks base method
func (m *MockCache) Purge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Purge")
}

// Purge indicates an expected call of Purge
func (mr *MockCacheMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockCache)(nil).Purge))
}

// TransactionsLength mocks base method
func (m *MockCache) TransactionsLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionsLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// TransactionsLength indicates an expected call of TransactionsLength
func (mr *MockCacheMockRecorder) TransactionsLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionsLength", reflect.TypeOf((*MockCache)(nil).TransactionsLength))
}
